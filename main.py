#!/usr/bin/env python3
"""
Bot de monitoreo para autorizaciones de Islas C√≠es
Monitorea la disponibilidad de plazas para una fecha espec√≠fica
"""

import time
import schedule
import logging
from datetime import datetime, timedelta
from scraper import CiesScraper
from notifier import Notifier
from stats import BotStats
from config import *

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('cies_monitor.log'),
        logging.StreamHandler()
    ]
)

class CiesMonitor:
    def __init__(self):
        self.scraper = CiesScraper()
        self.notifier = Notifier()
        self.stats = BotStats()
        self.last_check = None
        self.consecutive_errors = 0
        self.max_errors = 5
        self.last_hourly_report = datetime.now().replace(minute=0, second=0, microsecond=0)
        
    def check_availability(self):
        """Verificar disponibilidad y enviar alertas si es necesario"""
        try:
            logging.info("=" * 50)
            logging.info("Iniciando verificaci√≥n de disponibilidad...")
            
            # Verificar disponibilidad
            result = self.scraper.check_availability()
            
            if result is None:
                self.consecutive_errors += 1
                self.stats.record_attempt(0, had_error=True)
                logging.error(f"Error en verificaci√≥n (intento {self.consecutive_errors}/{self.max_errors})")
                
                if self.consecutive_errors >= self.max_errors:
                    logging.critical("Demasiados errores consecutivos. Deteniendo el bot.")
                    return False
                return True
            
            # Resetear contador de errores si la verificaci√≥n fue exitosa
            self.consecutive_errors = 0
            
            # Registrar estad√≠sticas
            self.stats.record_attempt(result['available_slots'], had_error=False)
            
            # Mostrar resultado
            logging.info(f"Resultado: {result['available_slots']} plazas disponibles para {result['date']}")
            
            # Verificar si hay disponibilidad
            if result['has_availability']:
                logging.info("üéâ ¬°PLAZAS DISPONIBLES ENCONTRADAS! Enviando alertas...")
                
                # Enviar alertas
                if self.notifier.send_alert(result):
                    logging.info("‚úÖ Alertas enviadas exitosamente")
                else:
                    logging.error("‚ùå Error al enviar alertas")
            else:
                logging.info("üòî No hay plazas disponibles a√∫n...")
            
            self.last_check = datetime.now()
            
            # Verificar si es hora de enviar resumen horario
            self.check_hourly_report()
            
            return True
            
        except Exception as e:
            logging.error(f"Error inesperado en check_availability: {e}")
            self.stats.record_attempt(0, had_error=True)
            return True
    
    def check_hourly_report(self):
        """Verificar si es hora de enviar resumen horario"""
        current_hour = datetime.now().replace(minute=0, second=0, microsecond=0)
        
        # Si ha pasado una hora desde el √∫ltimo reporte
        if current_hour > self.last_hourly_report:
            try:
                # Obtener resumen de la hora anterior
                previous_hour_summary = self.stats.get_previous_hour_summary()
                
                if previous_hour_summary:
                    summary_text = self.stats.format_hourly_summary(
                        previous_hour_summary, 
                        f"Hora {self.last_hourly_report.strftime('%H:00')}"
                    )
                    
                    # Enviar resumen por Telegram
                    if self.notifier.send_telegram_summary(summary_text):
                        logging.info("‚úÖ Resumen horario enviado por Telegram")
                    else:
                        logging.error("‚ùå Error al enviar resumen horario")
                
                # Actualizar hora del √∫ltimo reporte
                self.last_hourly_report = current_hour
                
                # Limpiar datos antiguos (m√°s de 7 d√≠as)
                self.stats.cleanup_old_data(days_to_keep=7)
                
            except Exception as e:
                logging.error(f"Error al enviar resumen horario: {e}")
    
    def run_continuous(self):
        """Ejecutar monitoreo continuo sin intervalos"""
        logging.info("üöÄ Iniciando bot de monitoreo de Islas C√≠es")
        logging.info(f"üìÖ Fecha objetivo: {TARGET_DATE}")
        logging.info(f"‚ö° Modo: Verificaci√≥n continua (sin intervalos)")
        logging.info(f"üåê URL objetivo: {TARGET_URL}")
        
        # Ejecutar verificaci√≥n inicial
        self.check_availability()
        
        # Loop principal - ejecutar continuamente sin esperar
        try:
            while True:
                # Ejecutar verificaci√≥n inmediatamente
                if not self.check_availability():
                    logging.critical("üõë Bot detenido debido a errores cr√≠ticos")
                    break
                
                # Peque√±a pausa para no saturar el servidor (1 segundo)
                time.sleep(1)
                
        except KeyboardInterrupt:
            logging.info("üõë Bot detenido por el usuario")
        except Exception as e:
            logging.error(f"Error en el loop principal: {e}")
        finally:
            # Determinar si fue un error cr√≠tico o detenci√≥n manual
            critical_error = self.consecutive_errors >= self.max_errors
            self.cleanup(critical_error=critical_error)
    
    def run_once(self):
        """Ejecutar una sola verificaci√≥n"""
        logging.info("üîç Ejecutando verificaci√≥n √∫nica...")
        return self.check_availability()
    
    def cleanup(self, critical_error=False):
        """Limpiar recursos"""
        try:
            # Enviar alerta de error cr√≠tico si es necesario
            if critical_error:
                self.send_critical_error_alert()
            
            self.notifier.close()
            logging.info("üßπ Recursos limpiados")
        except Exception as e:
            logging.error(f"Error en cleanup: {e}")
    
    def send_critical_error_alert(self):
        """Enviar alerta de error cr√≠tico por Telegram"""
        try:
            error_message = f"""
üö® **BOT DETENIDO POR ERRORES CR√çTICOS** üö®

ü§ñ El bot de monitoreo de Islas C√≠es se ha detenido autom√°ticamente debido a errores consecutivos.

‚ö†Ô∏è **Detalles:**
- Errores consecutivos: {self.consecutive_errors}/{self.max_errors}
- √öltima verificaci√≥n: {self.last_check.strftime('%Y-%m-%d %H:%M:%S') if self.last_check else 'N/A'}
- Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üîÑ **Acci√≥n requerida:**
Reinicia el bot manualmente para continuar el monitoreo.

üìä **Estad√≠sticas de la sesi√≥n:**
{self.stats.get_session_summary()}

üîó Repositorio: https://github.com/sropero96/scraping-cies-bot
            """
            
            if self.notifier.send_telegram_critical_alert(error_message):
                logging.info("‚úÖ Alerta de error cr√≠tico enviada por Telegram")
            else:
                logging.error("‚ùå Error al enviar alerta de error cr√≠tico")
                
        except Exception as e:
            logging.error(f"Error al enviar alerta de error cr√≠tico: {e}")

def main():
    """Funci√≥n principal"""
    monitor = CiesMonitor()
    
    # Verificar configuraci√≥n
    if not GMAIL_ADDRESS or not GMAIL_PASSWORD:
        logging.warning("‚ö†Ô∏è  Configuraci√≥n de email incompleta")
    
    if not TWILIO_ACCOUNT_SID or not TWILIO_AUTH_TOKEN:
        logging.warning("‚ö†Ô∏è  Configuraci√≥n de WhatsApp incompleta")
    
    # Ejecutar monitoreo
    monitor.run_continuous()

if __name__ == "__main__":
    main()